
public class Test1 {

	public static void main(String[] args) {
	
	/*	// 기본형 타입 8개
		 boolean (1)
		
		 char (2)
		
		 byte (1)
		 short (2)
		 int (4) - 기본형
		 long (8)
		
		 float (4)
	 	 double (8) -기본형
*/		
		// Q1.
		byte a = 11;
		byte b = 29;
		// byte c = a + b;  //<-강제형변환을 해야함. 
		//byte c = (byte)(a + b); 하거나 
		int c = a + b;
		
		System.out.println("c : "+c); // C : 40 로 나옴
		
		//Q2.
		char ch ='A'; // A = 65 (어떤 표를 보면)
		// * 문자형의 기본적으로 정수형타입의 데이터를 따른다.
		ch += 6;
		//=> ch = ch + 6; 의미  // ch = A + 6; //char는 정수형('')을 따르니까 이때 +는 연산자이다. 반면 ("")을 따르면 이떄 +는 연결자로 쓰인것.
		// ch = 65 + 6 = 71 > 71은 G이다. ( 코드표 보면 그러함 ) 
		
		System.out.println("ch : "+ch); // ch : G 로 나옴.
		
		// 반면 ch = ch + 6 ; 을 하면 에러가 난다. 왜냐하면 char이 2byte고 int는  4byte니까 자동형변환을 통해서 안됨. 
		//그래서 사용하려면 ch = char(ch+6); 해야함. > ch = 65 + 6 = 71 나옴.
		
	/*	char ch2 = 65;
		System.out.println("ch2 : "+ch2); // A가 나옴.
*/		
		char ch2 = 65;
		//ch2 - ch2 + 10;
		 ch2 += 10;
		 System.out.println("ch2 : "+ch2); // K나옴
		 
	/*	char ch3 = 'G';
		System.out.println("ch3 : "+ch3-6); // 에러나옴. 문자열 - 6이기 때문이다.
*/		
/*		char ch3 = 'G';
		System.out.println("ch3 : "+(ch3-6)); // 괄호로 우선순위를 주면 65가 나온다.
*/		
		char ch3 = 'G';
		System.out.println("ch3 : "+(char)(ch3-6)); // A가 나오려면 형변환하면 됨.
		
		int ch4 = 65;
		System.out.println("ch4 : "+ch4); // 65로 출력됨.
		
		int ch5 = 'A'; //int에 char(문자열,정수형)타입을 넣었다. 그런데 자동으로 형변환이 되어서 아래 답이 65가 출력된다.
		System.out.println("ch5 : "+ch5); // 만약 A를 출력하고 싶다면 형변환을 해준다. System.out.println("ch5 : "+(char)ch5);
		
		//Q3.
		
/*		float f = 3 / 2;
		System.out.println("f : "+f); // 1.0 나온다. 연산을 할때 기본적으로 int타입으로 형변환이 되었음. 이때 소수점 이하를 모두 버림.1을 소수점이 있는 float타입으로 표현하여 1.0이 되었다.
		//둘중의 하나를 실수형으로 바꾸거나 실수형 연산이 가능하도록 변환하면 원하는 값1.5가 나온다. 
*/		
		float f = 3 / 2f; //1.5나옴
		System.out.println("f : "+f);
		
		/*float f2 = 3.0 / 2f;
		System.out.println("f2 : "+f2); // 이것도 안됨. 왜냐, 연산을 할때 더블로 바뀌었당. 그래서 안되는 것. 
		//되게하려면 
*/		
		float f2 = (float)(3.0 / 2f);
		System.out.println("f2 : "+f2); //1.5 나옴
		
/*		long l = 3000 * 3000 * 3000;
		System.out.println(" l : " +l);*/ // 에러나옴.
		
		long l = 3000 * 3000 * 3000l;
		System.out.println(" l : " +l);
		// *기본형 타입이 아닌 연산이 필요한 경우 (long, float, double)
		// 연산시 데이터 주에 하나 이상 해당 타입이면 자동으로 변경되서 연산됨.
		
	/*	float ff = 0.1f;
		double dd = 0.1d;
		System.out.println(ff ==dd);
		
		boolean result = ff==dd;
		System.out.println(result);
		// * 자바에서는 실수데이터를 정확하게 표현x
*/		
		float ff = 0.1f;
		// ->(4byte)
		// => 0.1007
		double dd = 0.1d;
		// -> (8byte)
		// => 0.10000001
		
		System.out.println(ff == (float)dd);
		
		boolean result = ff==(float)dd;
		
		System.out.println(result);
		// * 자바에서는 실수데이터를 정확하게 표현X
		// * float, double 연산시 double을 float형태로 변경하는게 좋음
		// => 기본형 실수형 타입의 데이터는 정밀한 계산 사용에는 부적합
		
		// Q4.
		
		int num = 24;
		// 변수 num 보다 크면서 가장 가까운 10의 배수에서 
		// 변수 num값을 뺀 나머지를 계산 (모든 2자리 수에 대한 처리 가능 )
		// 30 - 24 = 6 => 10-4 = 6
		// 80 - 71 = 9 => 10-1 = 9
		// 60 - 56 = 4 ...
		// 20 - 12 = 8
		// 100 - 97 = 3 => 10-7 = 3
		//->num의 일의 자리만 알면 되겠다.생각해봄.
		//->나머지를 구하면 되겠다.
		System.out.println("결과 :" + (10-num%10));  
		
		// Q5.
		/*ch = 'G';
    		boolean bool = ? ;
		// -> 변수 ch값이 영어 대문자 일때 ture 값 출력 하려면
		
		boolean bool = 'ch' >= 65 && 'ch'<=90 ;
		 //내답. 이거 아님
*/		
		
/*		ch = 'G';
		// = > char 타입은 기본형이 정수형이다 (정수형으로 형변환 가능)
		//=> 비교연산이 가능해진다.
		// A(65) ~Z(90), a(97)~z(122)
		
		boolean bool = ((ch >= 65) && (ch <=90))? true : false ;
		//> 논리연산자는 삼항연산자가 필요없다. 즉 true false 필요없음.
		boolean bool = ((ch >= 65) && (ch <=90));
		System.out.println("bool : "+ bool);
		
		//boolean bool = (('A'<=ch) && (ch <='Z')); 아스키코드가 없을때.문자가 연산을 만나서 숫자로 바뀐것.
		
		
		// 소문자, 대문자면 true 다른 문자면 false 
		boolean bool = ((('A'<=ch)&&(ch<='Z'))||('a'<=ch)&&(ch<='z'));
		
		//-> 숫자 일때 추가 48 ~ 57 리터럴 인데 '0'은 문자이다.
		boolean bool = ((('A'<=ch)&&(ch<='Z'))||('a'<=ch)&&(ch<='z')||('0'<=ch)&&(ch<='9'));
		System.out.println("bool : "+ bool);
		
		//숫자 0~9
		System.out.println(4 + 6);
		//문자 '0' ~ '9'
		System.out.println('0' + '1');
		//문자열 "0"~"9"
		System.out.println("4" + "6");*/
		
		//Q 
		//ch 입력된 변수의 값이 대문자이면 -> 소문자로 변경해서 출력
		//소문자라면 -> 그대로 출력
		
	/*	ch = 'T';
		
		//char value = (('A'<=ch)&&(ch<='Z'))? ('a'<=ch)&&(ch<='z') : ch;  //이건 내답인데 오답.
		//32의 간격이라 32 더한것.
*/

		ch = 'T';
		
		char value = ('A'<=ch && ch<='Z')? (char)(ch+32):(('a'<=ch)&&(ch<='z')? (char)(ch-32):ch);
		
		System.out.println(" ch : "+ch);
		System.out.println(" 연산 후 ch : "+value);

		
		

	}

}

--------------------------------------------------------------------


public class Test2 {

	public static void main(String[] args) {
		
		// 자바프로그래밍은 문으로 구성되어있다.
		
		/*
		문 -1 ) 실행문 - 순차문
		 			- 제어문 - 분기문 (if, if-else...)
		 				   - 반복문 (for, while....)
		 
		 	2 ) 비실행문 - 주석문( //, \* *\ \** *\ ) 
		
		 */

		// 분기문 if
		// 조건식 : 비교연산(비교연산자, 논리연산), boolean타입 데이터
		
		//if (조건식){
		//	 조건식이 만족할때 실행할 문장
			
		// }
		
		int num = 100;
		
		if(num == 200){
			
			System.out.println("num값은 100이다.");
		}
	
		
		// num 값이 0보다 클경우 " 양수 입니다." 출력
		if(num > 0){
			System.out.println("num값은  양수 입니다.");
		}
			
		if(num > 0){ System.out.println("num값은  양수 입니다.");} //코드는 간결할수록 좋다. 아직아니고 나중에 줄이자요.지금은 배우는거라 정확도 UP
		
		if(num > 0)
			System.out.println("num값은  양수 입니다.");}
		// => 실행하는 코드의 수가 1줄일때만 중괄호를 생략가능하다.
		// => 1줄의 코드도 중괄호 사용을 권장 (의도한 바를 정확하게 표현하기 위해서)
		
		
		
		
		
		
	

}
